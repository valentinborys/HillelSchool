{"name": "test_registration", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=126.0.6478.127)\nStacktrace:\n\tGetHandleVerifier [0x00F6C1C3+27395]\n\t(No symbol) [0x00F03DC4]\n\t(No symbol) [0x00E01B7F]\n\t(No symbol) [0x00DDE483]\n\t(No symbol) [0x00E6A06F]\n\t(No symbol) [0x00E7C3D6]\n\t(No symbol) [0x00E63736]\n\t(No symbol) [0x00E37541]\n\t(No symbol) [0x00E380BD]\n\tGetHandleVerifier [0x01223A93+2876371]\n\tGetHandleVerifier [0x01277F5D+3221661]\n\tGetHandleVerifier [0x00FED634+556916]\n\tGetHandleVerifier [0x00FF474C+585868]\n\t(No symbol) [0x00F0CE04]\n\t(No symbol) [0x00F09818]\n\t(No symbol) [0x00F099B7]\n\t(No symbol) [0x00EFBF0E]\n\tBaseThreadInitThunk [0x75827BA9+25]\n\tRtlInitializeExceptionChain [0x7701BE3B+107]\n\tRtlClearBits [0x7701BDBF+191]", "trace": "setup = <lecture_27.pages.RegistrationPage.RegistrationPage object at 0x000002734017A5A0>\n\n    @allure.feature(\"Registration Test\")\n    @allure.step(\"Пошук та взаємодія з основними елементами\")\n    def test_registration(setup):\n        registration_page = setup\n        registration_page.element_is_clickable(Locators.SIGN_IN_BUTTON).click()\n        registration_page.element_is_clickable(Locators.REGISTRATION_BUTTON).click()\n        registration_page.element_is_visible(Locators.NAME_FIELD).send_keys(\"Valentyn\")\n        registration_page.element_is_visible(Locators.LAST_NAME_FIELD).send_keys(\"Test\")\n        registration_page.element_is_visible(Locators.EMAIL_FIELD).send_keys(\"biр1fg1f12123gehgins@from.shir\")\n        registration_page.element_is_visible(Locators.PASSWORD_FIELD).send_keys(\"123123Qwe\")\n        registration_page.element_is_visible(Locators.RE_ENTER_PASSWORD_FIELD).send_keys(\"123123Qwe\")\n        registration_page.element_is_clickable(Locators.REGISTER_BUTTON).click()\n    \n        new_url = registration_page.driver.current_url\n        response = requests.get(new_url)\n        assert response.status_code == 200, f\"Expected status code 200, but got {response.status_code}\"\n>       garage_element = registration_page.element_is_clickable(Locators.GARAGE)\n\nlecture_27\\tests\\test_registration.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlecture_27\\pages\\BasePage.py:14: in element_is_clickable\n    return self.wait.until(EC.element_to_be_clickable(locator))\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:363: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000027340459310>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...dInitThunk [0x75827BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7701BE3B+107]\\\\n\\\\tRtlClearBits [0x7701BDBF+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=126.0.6478.127)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00F6C1C3+27395]\nE       \t(No symbol) [0x00F03DC4]\nE       \t(No symbol) [0x00E01B7F]\nE       \t(No symbol) [0x00DDE483]\nE       \t(No symbol) [0x00E6A06F]\nE       \t(No symbol) [0x00E7C3D6]\nE       \t(No symbol) [0x00E63736]\nE       \t(No symbol) [0x00E37541]\nE       \t(No symbol) [0x00E380BD]\nE       \tGetHandleVerifier [0x01223A93+2876371]\nE       \tGetHandleVerifier [0x01277F5D+3221661]\nE       \tGetHandleVerifier [0x00FED634+556916]\nE       \tGetHandleVerifier [0x00FF474C+585868]\nE       \t(No symbol) [0x00F0CE04]\nE       \t(No symbol) [0x00F09818]\nE       \t(No symbol) [0x00F099B7]\nE       \t(No symbol) [0x00EFBF0E]\nE       \tBaseThreadInitThunk [0x75827BA9+25]\nE       \tRtlInitializeExceptionChain [0x7701BE3B+107]\nE       \tRtlClearBits [0x7701BDBF+191]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "steps": [{"name": "Пошук та взаємодія з основними елементами", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=126.0.6478.127)\nStacktrace:\n\tGetHandleVerifier [0x00F6C1C3+27395]\n\t(No symbol) [0x00F03DC4]\n\t(No symbol) [0x00E01B7F]\n\t(No symbol) [0x00DDE483]\n\t(No symbol) [0x00E6A06F]\n\t(No symbol) [0x00E7C3D6]\n\t(No symbol) [0x00E63736]\n\t(No symbol) [0x00E37541]\n\t(No symbol) [0x00E380BD]\n\tGetHandleVerifier [0x01223A93+2876371]\n\tGetHandleVerifier [0x01277F5D+3221661]\n\tGetHandleVerifier [0x00FED634+556916]\n\tGetHandleVerifier [0x00FF474C+585868]\n\t(No symbol) [0x00F0CE04]\n\t(No symbol) [0x00F09818]\n\t(No symbol) [0x00F099B7]\n\t(No symbol) [0x00EFBF0E]\n\tBaseThreadInitThunk [0x75827BA9+25]\n\tRtlInitializeExceptionChain [0x7701BE3B+107]\n\tRtlClearBits [0x7701BDBF+191]\n\n", "trace": "  File \"C:\\Users\\Valentyn\\PycharmProjects\\HillelSchool\\venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\Valentyn\\PycharmProjects\\HillelSchool\\lecture_27\\tests\\test_registration.py\", line 32, in test_registration\n    garage_element = registration_page.element_is_clickable(Locators.GARAGE)\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Valentyn\\PycharmProjects\\HillelSchool\\lecture_27\\pages\\BasePage.py\", line 14, in element_is_clickable\n    return self.wait.until(EC.element_to_be_clickable(locator))\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Valentyn\\PycharmProjects\\HillelSchool\\venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 96, in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Valentyn\\PycharmProjects\\HillelSchool\\venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 363, in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Valentyn\\PycharmProjects\\HillelSchool\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 741, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Valentyn\\PycharmProjects\\HillelSchool\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\Valentyn\\PycharmProjects\\HillelSchool\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "parameters": [{"name": "setup", "value": "<lecture_27.pages.RegistrationPage.RegistrationPage object at 0x000002734017A5A0>"}], "start": 1720645425001, "stop": 1720645431762}], "start": 1720645425001, "stop": 1720645431763, "uuid": "f9837c7c-7a4b-4a8e-b242-32df38c8fb1f", "historyId": "b12d1ededf2d83ade41de00081c0ebee", "testCaseId": "b12d1ededf2d83ade41de00081c0ebee", "fullName": "lecture_27.tests.test_registration#test_registration", "labels": [{"name": "feature", "value": "Registration Test"}, {"name": "parentSuite", "value": "lecture_27.tests"}, {"name": "suite", "value": "test_registration"}, {"name": "host", "value": "DESKTOP-7V2003J"}, {"name": "thread", "value": "20404-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "lecture_27.tests.test_registration"}]}